{"version":3,"sources":["./src/app/home/home.page.html","./src/app/home/home.module.ts","./src/app/home/home.page.scss","./src/app/home/home.page.ts","./src/app/services/data.service.ts"],"names":[],"mappings":"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","file":"home-home-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"light\\\">\\n    <ion-title>Github Search</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n \\n<ion-content>\\n \\n  <ion-searchbar [(ngModel)]=\\\"searchTerm\\\" (ionChange)=\\\"searchChanged($event)\\\"></ion-searchbar>\\n\\n  <!-- Item Labels -->\\n<ion-item>\\n  <ion-label>{{count}} repository results</ion-label>\\n</ion-item>\\n\\n  <ion-list>\\n \\n    <ion-item button *ngFor=\\\"let item of (results | async)\\\" [routerLink]=\\\"['/', 'movies', item.imdbID]\\\">\\n      <ion-label text-wrap color=\\\"primary\\\">\\n        {{ item.full_name }}\\n        <h3>{{ item.description }}</h3>\\n        <h3>Updated on {{ item.updated_at }}</h3>\\n      </ion-label>\\n \\n      <ion-icon slot=\\\"end\\\" *ngIf=\\\"item.Type == 'movie'\\\" name=\\\"videocam\\\"></ion-icon>\\n      <ion-icon slot=\\\"end\\\" *ngIf=\\\"item.Type == 'series'\\\" name=\\\"tv\\\"></ion-icon>\\n      <ion-icon slot=\\\"end\\\" *ngIf=\\\"item.Type == 'game'\\\" name=\\\"logo-game-controller-b\\\"></ion-icon>\\n \\n    </ion-item>\\n \\n  </ion-list>\\n \\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { HomePage } from './home.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: HomePage\n      }\n    ])\n  ],\n  declarations: [HomePage]\n})\nexport class HomePageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hvbWUvaG9tZS5wYWdlLnNjc3MifQ== */\"","import { DataService, SearchType } from './../services/data.service';\nimport { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage implements OnInit {\n\n  results: Observable<any>;\n  searchTerm: string = '';\n  type: SearchType = SearchType.all;\n  count: string = '0';\n\n  baseUrl:string = \"https://api.github.com/search/repositories?per_page=5&q=react\";\n\n  /**\n   * Constructor of our first page\n   * @param movieService The movie Service to get data\n   */\n  constructor(private dataService: DataService) {}\n\n  ngOnInit() { }\n \n  searchChanged() {\n    console.log('----- searchChanged');\n    // Call our service function which returns an Observable\n    this.results = this.dataService.searchData(this.searchTerm, this.type);\n    console.log('----- this.results',this.results);\n\n    this.count = '0';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n \n// Typescript custom enum for search types (optional)\nexport enum SearchType {\n  all = '',\n  movie = 'movie',\n  series = 'series',\n  episode = 'episode'\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  // url = 'https://api.github.com/search/repositories?per_page=5&q=react';\n  url = 'https://api.github.com/search/repositories';\n \n  constructor(private http: HttpClient) { }\n\n  /**\n  * Get data from the OmdbApi \n  * map the result to return only the results that we need\n  * \n  * @param {string} title Search Term\n  * @param {SearchType} type movie, series, episode or empty\n  * @returns Observable with the search results\n  */\n searchData(title: string, type: SearchType): Observable<any> {\n  console.log('----- searchData from ' + this.url);\n  console.log('----- searchData title ' + title);\n  console.log('----- searchData type ' + type);\n  \n  // // return this.http.get('${this.url}?s=${encodeURI(title)}&type=${type}&apikey=${this.apiKey}').pipe(\n  // return this.http.get('${this.url}?per_page=5&q=react').pipe(\n  //     map(results => results['Search'])\n  // );\n\n  let urlPost = this.url + '?per_page=5&q=' + title;\n  console.log('----- urlPost',urlPost);\n\n  return this.http.get(urlPost).pipe(\n    // map(results => console.log('----- results',results['total_count']))\n      map(results => results['items'])\n      );\n\n}\n\n}\n"],"sourceRoot":""}